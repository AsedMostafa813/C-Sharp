//GenericRepository
// create folder in root by name: Data
// create a class in folder Data by name: GenericRepository.cs
// copy this codes in That class
// use


using ProjectName.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace ProjectName.Data
{
    public class GenericRepository<T> where T : class
    {
        NorthwindEntities _context = null;
        DbSet<T> table = null;
        public GenericRepository()
        {
            this._context = new NorthwindEntities();
            table = _context.Set<T>();
        }

        public void Insert(T t)
        {
            table.Add(t);
            _context.SaveChanges();
        }

        public void Update(T t)
        {
            table.Attach(t);
            _context.Entry(t).State = EntityState.Modified;
            _context.SaveChanges();
        }

        public void Delete(object id)
        {
            T existing = table.Find(id);
            table.Remove(existing);
            _context.SaveChanges();
        }

        public IEnumerable<T> GetAll()
        {
            return table.ToList();
        }
        public T GetById(object id)
        {
            return table.Find(id);
        }

        public IQueryable<T> GetAsQueryable(
              Expression<Func<T, bool>> predicate = null, //where
              Func<IQueryable<T>,IOrderedQueryable<T>> orderBy = null, //orderby
              string includes = null, int? currentPage = null, int pageItemCount = 10)
        {

            IQueryable<T> query = _context.Set<T>();
            if (predicate != null)
            {
                query = query.Where(predicate);
            }

            if (orderBy != null)
            {
                query = orderBy(query);
            }

            if (includes != null)
            {
                var array = includes.Split(',');
                foreach (var item in array)
                {
                    query = query.Include<T>(item);
                }
            }
            if (currentPage != null)
            {
                int skipCount = (currentPage.Value - 1) * pageItemCount;
                query = query.Skip(skipCount).Take(pageItemCount);

            }

            return query;
        }
    }
}
